#include <stdio.h>
#include <stdlib.h>
void addMatrix(int n, int A[n][n], int B[n][n], int result[n][n]) {
    for (int i = 0; i< n; i++) {
        for (int j = 0; j < n; j++) {
            result[i][j] = A[i][j] + B[i][j];
        }
    }
}
void subtractMatrix(int n, int A[n][n], int B[n][n], int result[n][n]) {
    for (int i = 0; i< n; i++) {
        for (int j = 0; j < n; j++) {
            result[i][j] = A[i][j] - B[i][j];
        }
    }
}
void strassenMultiply(int n, int A[n][n], int B[n][n], int C[n][n]) {
    if (n == 1) {
C[0][0] = A[0][0] * B[0][0];
        return;
    }
    int newSize = n / 2;
    int A11[newSize][newSize], A12[newSize][newSize], A21[newSize][newSize], A22[newSize][newSize];
    int B11[newSize][newSize], B12[newSize][newSize], B21[newSize][newSize], B22[newSize][newSize];
    for (int i = 0; i<newSize; i++) {
        for (int j = 0; j <newSize; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + newSize];
            A21[i][j] = A[i + newSize][j];
            A22[i][j] = A[i + newSize][j + newSize];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + newSize];
            B21[i][j] = B[i + newSize][j];
            B22[i][j] = B[i + newSize][j + newSize];
        }
    }
    int P1[newSize][newSize], P2[newSize][newSize], P3[newSize][newSize], P4[newSize][newSize];
    int P5[newSize][newSize], P6[newSize][newSize], P7[newSize][newSize];
    int temp1[newSize][newSize], temp2[newSize][newSize];
subtractMatrix(newSize, B12, B22, temp1);
strassenMultiply(newSize, A11, temp1, P1);
addMatrix(newSize, A11, A12, temp1);
strassenMultiply(newSize, temp1, B22, P2);
addMatrix(newSize, A21, A22, temp1);
strassenMultiply(newSize, temp1, B11, P3);
subtractMatrix(newSize, B21, B11, temp1);
strassenMultiply(newSize, A22, temp1, P4);
addMatrix(newSize, A11, A22, temp1);
addMatrix(newSize, B11, B22, temp2);
strassenMultiply(newSize, temp1, temp2, P5);
subtractMatrix(newSize, A12, A22, temp1);
addMatrix(newSize, B21, B22, temp2);
strassenMultiply(newSize, temp1, temp2, P6);
subtractMatrix(newSize, A11, A21, temp1);
addMatrix(newSize, B11, B12, temp2);
strassenMultiply(newSize, temp1, temp2, P7);
    int C11[newSize][newSize], C12[newSize][newSize], C21[newSize][newSize], C22[newSize][newSize];
addMatrix(newSize, P5, P4, temp1);
subtractMatrix(newSize, temp1, P2, C11);
addMatrix(newSize, P1, P2, C12);
addMatrix(newSize, P3, P4, C21);
addMatrix(newSize, P1, P5, temp1);
subtractMatrix(newSize, temp1, P3, P7);
subtractMatrix(newSize, temp1, P7, C22);
    for (int i = 0; i<newSize; i++) {
        for (int j = 0; j <newSize; j++) {
            C[i][j] = C11[i][j];
            C[i][j + newSize] = C12[i][j];
C[i + newSize][j] = C21[i][j];
C[i + newSize][j + newSize] = C22[i][j];
        }
    }
}
int main() {
    int n;
printf("Enter the size of the matrix (n x n): ");
scanf("%d", &n);
    int A[n][n], B[n][n], C[n][n];
printf("Enter matrix A elements:\n");
    for (int i = 0; i< n; i++) {
        for (int j = 0; j < n; j++) {
scanf("%d", &A[i][j]);
        }
    }
printf("Enter matrix B elements:\n");
    for (int i = 0; i< n; i++) {
        for (int j = 0; j < n; j++) {
scanf("%d", &B[i][j]);
        }
    }
strassenMultiply(n, A, B, C);
printf("Product matrix C is:\n");
    for (int i = 0; i< n; i++) {
        for (int j = 0; j < n; j++) {
printf("%d ", C[i][j]);
        }
printf("\n");
    }

    return 0;
}
